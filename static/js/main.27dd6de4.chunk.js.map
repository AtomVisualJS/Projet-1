{"version":3,"sources":["templates/Naviguation.js","App.js","api/url.js","api/GET/postsGet.js","api/GET/getInfos.js","templates/InfosComponent.js","templates/Home.js","routes.js","features/slice/postSlice.js","features/slice/infosSlice.js","features/store.js","serviceWorker.js","index.js"],"names":["Naviguation","Component","App","className","axios","create","baseURL","GetAllPosts","createAsyncThunk","a","api","get","response","data","GetAllInfos","InfosComponent","dispatch","useDispatch","useEffect","Home","renderedPosts","useSelector","state","posts","map","post","title","body","id","Routing","exact","path","render","Fragment","to","postSlice","createSlice","name","initialState","loading","error","extraReducers","pending","action","status","fulfilled","payload","rejected","infosSlice","infos","message","store","configureStore","reducer","postsReducer","infosReducer","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0LAEMA,E,4JACF,WACI,OACI,6C,GAHcC,aAUXD,ICDAE,I,IAAAA,EARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,O,wCCFSC,E,OAAAA,EAAMC,OAAO,CACxBC,QAAS,+B,OCDAC,EAAcC,YAAiB,eAAD,sBAAiB,4BAAAC,EAAA,sEACjCC,EAAIC,IAAI,UADyB,cAClDC,EADkD,yBAEjDA,EAASC,MAFwC,4C,QCD/CC,EAAcN,YAAiB,eAAD,sBAAiB,4BAAAC,EAAA,sEACnCC,EAAIC,IAAI,UAD2B,cACpDC,EADoD,yBAEnDA,EAASC,MAF0C,4CCa7CE,EAXQ,WACrB,IAAMC,EAAWC,cAOf,OANFC,qBAAU,WACRF,EAASF,OACR,CAACE,IAIM,yBCwBGG,EAhCF,WACX,IAAMH,EAAWC,cAGjBC,qBAAU,WACRF,EAAST,OACR,CAACS,IAEN,IAEMI,EAFQC,aAAY,SAACC,GAAD,OAAWA,EAAMC,MAAMA,SAErBC,KAAI,SAACC,GAC/B,OACE,gCACE,6BAAKA,EAAKC,QACV,4BAAID,EAAKE,SAFDF,EAAKG,OAOjB,OACE,gCACE,sCACA,cAAC,EAAD,IACCR,MCvBDS,E,4JACJ,WACE,OACE,8BACE,eAAC,IAAD,WACE,cAAC,IAAD,CACEC,OAAK,EACLC,KAAK,IACLC,OAAQ,kBACR,cAAC,IAAMC,SAAP,UACE,cAAC,EAAD,SAGJ,cAAC,IAAD,CAAUC,GAAG,e,GAbDjC,aAoBP4B,I,QCEAM,EAtBGC,YAAY,CAC1BC,KAAM,OACNC,aAAc,CACVf,MAAO,GACPgB,SAAS,EACTC,MAAO,MAEXC,eAAa,mBACRlC,EAAYmC,SAAU,SAACpB,EAAOqB,GAC3BrB,EAAMsB,OAAS,aAFV,cAIRrC,EAAYsC,WAAY,SAACvB,EAAOqB,GAC7BrB,EAAMC,MAAQoB,EAAOG,QACrBxB,EAAMsB,OAAS,eANV,cAQRrC,EAAYwC,UAAW,SAACzB,EAAOqB,GAC5BrB,EAAMkB,MAAQG,EAAOH,MACrBlB,EAAMsB,OAAS,YAVV,KAejB,QCDeI,EAtBIZ,YAAY,CAC3BC,KAAM,QACNC,aAAc,CACVW,MAAO,GACPV,SAAS,EACTC,MAAO,MAEXC,eAAa,mBACR3B,EAAY4B,SAAU,SAACpB,EAAOqB,GAC3BrB,EAAMsB,OAAS,aAFV,cAIR9B,EAAY+B,WAAY,SAACvB,EAAOqB,GAC7BrB,EAAMsB,OAAS,YACftB,EAAM2B,MAAQN,EAAOG,WANhB,cAQRhC,EAAYiC,UAAW,SAACzB,EAAOqB,GAC5BrB,EAAMsB,OAAS,SACftB,EAAMkB,MAAQG,EAAOH,MAAMU,WAVtB,KAejB,QCrBaC,EAAQC,YAAe,CAChCC,QAAS,CACL9B,MAAO+B,EACPL,MAAOM,KCIKC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCRNC,IAAS7B,OACP,cAAC,IAAM8B,WAAP,UACE,cAAC,IAAD,CAAUX,MAAOA,EAAjB,SACE,eAAC,IAAD,WACI,cAAC,EAAD,IACA,cAAC,EAAD,WAIRY,SAASC,eAAe,SDgHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.27dd6de4.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Naviguation extends Component {\n    render() {\n        return (\n            <div>\n                Header\n            </div>\n        );\n    }\n}\n\nexport default Naviguation;","import React from \"react\";\nimport Naviguation from \"./templates/Naviguation\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Naviguation />\n    </div>\n  );\n}\n\nexport default App;\n","\n\nimport axios from 'axios';\n\nexport default axios.create({\n    baseURL: 'http://localhost:5000/api/',\n});\n\n\n\n\n\n\n\n\n\n","\nimport api from \"../url\"\nimport { createAsyncThunk } from \"@reduxjs/toolkit\"\n\nexport const GetAllPosts = createAsyncThunk(\"posts/getAll\", async () => {\n    const response = await api.get(\"/posts\")\n    return response.data\n})\n\n\n\n\n","import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport api from \"../url\";\n\nexport const GetAllInfos = createAsyncThunk(\"infos/getAll\", async () => {\n  const response = await api.get(\"/infos\");\n  return response.data;\n});\n","import React from \"react\";\nimport { GetAllInfos } from \"../api/GET/getInfos\";\nimport { useDispatch } from \"react-redux\";\nimport { useEffect } from \"react\";\n\nconst InfosComponent = () => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(GetAllInfos());\n  }, [dispatch]);\n\n\n\n    return (<div></div>)\n}\n\nexport default InfosComponent;\n","import React, {  useEffect } from \"react\";\nimport { GetAllPosts } from \"../api/GET/postsGet\";\nimport { useDispatch, useSelector} from \"react-redux\";\nimport InfosComponent from \"./InfosComponent\";\n\nconst Home = () => {\n  const dispatch = useDispatch();\n  \n\n  useEffect(() => {\n    dispatch(GetAllPosts());\n  }, [dispatch]);\n\nconst posts = useSelector((state) => state.posts.posts);\n\nconst renderedPosts = posts.map((post) => {\n  return (\n    <div key={post.id}>\n      <h1>{post.title}</h1>\n      <p>{post.body}</p>\n    </div>\n  );\n});\n\n  return (\n    <div>\n      <h1>Home</h1>\n      <InfosComponent />\n      {renderedPosts}\n    </div>\n  );\n};\n\n\n\n\n\nexport default Home;\n","import React, { Component } from \"react\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\n\nimport Home from './templates/Home';\n\nclass Routing extends Component {\n  render() {\n    return (\n      <div>\n        <Switch>\n          <Route\n            exact\n            path=\"/\"\n            render={() => \n            <React.Fragment>\n              <Home />\n            </React.Fragment>}\n          />\n          <Redirect to=\"/\" />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default Routing;\n","\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { GetAllPosts } from \"../../api/GET/postsGet\";\n\n\nconst postSlice = createSlice({\n    name: \"post\",\n    initialState: {\n        posts: [],\n        loading: false,\n        error: null,\n    },\n    extraReducers: {\n        [GetAllPosts.pending]: (state, action) => {\n            state.status = \"loading\";\n        },\n        [GetAllPosts.fulfilled]: (state, action) => {\n            state.posts = action.payload;\n            state.status = \"succeeded\";\n        },\n        [GetAllPosts.rejected]: (state, action) => {\n            state.error = action.error;\n            state.status = \"failed\";\n        },\n    },\n});\n\nexport default postSlice.reducer;","\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { GetAllInfos } from \"../../api/GET/getInfos\";\n\nconst infosSlice = createSlice({\n    name: \"infos\",\n    initialState: {\n        infos: [],\n        loading: false,\n        error: null,\n    },\n    extraReducers: {\n        [GetAllInfos.pending]: (state, action) => {\n            state.status = \"loading\";\n        },\n        [GetAllInfos.fulfilled]: (state, action) => {\n            state.status = \"succeeded\";\n            state.infos = action.payload;\n        },\n        [GetAllInfos.rejected]: (state, action) => {\n            state.status = \"failed\";\n            state.error = action.error.message;\n        },\n    },\n});\n\nexport default infosSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport postsReducer from './slice/postSlice';\nimport infosReducer from './slice/infosSlice';\n\n\nexport const store = configureStore({\n    reducer: {\n        posts: postsReducer, \n        infos: infosReducer,\n    }\n});\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport  Routing  from \"./routes\"\nimport { store } from \"./features/store\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n          <App />\n          <Routing/>\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}